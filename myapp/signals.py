from django.db.models.signals import post_save, m2m_changed
from django.dispatch import receiver
from django.contrib.auth import get_user_model
from .models import Post, Comment, Order, Follow, GroupPost, Member,CustomUser, Member

from notifications.utils import create_notification

# ‚úÖ ‡πÉ‡∏ä‡πâ CustomUser ‡πÅ‡∏ó‡∏ô `auth.User`
User = get_user_model()

# ‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà
@receiver(post_save, sender=Post)
def new_post_notification(sender, instance, created, **kwargs):
    if created:
        followers = Follow.objects.filter(following=instance.user)
        for follower in followers:
            create_notification(
                user=follower.follower,
                sender=instance.user,
                notification_type="new_post",
                post=instance
            )

# ‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡πÇ‡∏û‡∏™‡∏ï‡πå
@receiver(post_save, sender=Comment)
def new_comment_notification(sender, instance, created, **kwargs):
    if created:
        create_notification(
            user=instance.post.user,
            sender=instance.user,
            notification_type="new_comment",
            post=instance.post
        )

# ‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÉ‡∏´‡∏°‡πà
@receiver(post_save, sender=Order)
def new_order_notification(sender, instance, created, **kwargs):
    if created:
        create_notification(
            user=instance.seller.user,
            sender=instance.user,
            notification_type="new_order",
            order=instance
        )

# ‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ñ‡∏ô‡∏Å‡∏î‡πÑ‡∏•‡∏Ñ‡πå‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°
@receiver(m2m_changed, sender=GroupPost.likes.through)
def group_post_like_notification(sender, instance, action, pk_set, **kwargs):
    if action == "post_add":
        for user_id in pk_set:
            try:
                user = User.objects.get(id=user_id)  # ‚úÖ ‡πÉ‡∏ä‡πâ CustomUser
                create_notification(
                    user=instance.user,
                    sender=user,
                    notification_type="like_group_post",
                    post=None,
                    group_post=instance
                )
            except User.DoesNotExist:
                print(f"‚ùå Error: User with id {user_id} does not exist.")

# ‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ñ‡∏ô‡∏Å‡∏î‡πÑ‡∏•‡∏Ñ‡πå‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
@receiver(m2m_changed, sender=Post.likes.through)
def post_like_notification(sender, instance, action, pk_set, **kwargs):
    if action == "post_add":
        for user_id in pk_set:
            try:
                user = User.objects.get(id=user_id)  # ‚úÖ ‡πÉ‡∏ä‡πâ CustomUser
                create_notification(
                    user=instance.user,
                    sender=user,
                    notification_type="like_post",
                    post=instance
                )
            except User.DoesNotExist:
                print(f"‚ùå Error: User with id {user_id} does not exist.")

@receiver(post_save, sender=CustomUser)
def create_member_profile(sender, instance, created, **kwargs):
    if created:
        # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡πà‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á `Member` ‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if not Member.objects.filter(user=instance).exists():
            Member.objects.create(user=instance)
from django.db.models.signals import post_save

from django.dispatch import receiver
from .models import Order, RefundRequest, SellerNotification, Review, WithdrawalRequest

# ‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÉ‡∏´‡∏°‡πà
from django.urls import reverse

from django.urls import reverse

@receiver(post_save, sender=Order)
def notify_seller_new_order(sender, instance, created, **kwargs):
    if created:
        order_url = reverse("seller_orders")  # ‡πÉ‡∏ä‡πâ URL ‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
        message = f"üõí ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÉ‡∏´‡∏°‡πà #{instance.id} ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å {instance.user.username} <a href='{order_url}' class='notif-btn'>üìú ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</a>"

        SellerNotification.objects.create(
            seller=instance.seller.user,
            message=message
        )



# ‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
@receiver(post_save, sender=Order)
def notify_seller_payment_received(sender, instance, **kwargs):
    if instance.payment_status == "paid":
        SellerNotification.objects.create(
            seller=instance.seller.user,
            message=f"üí∞ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ #{instance.id} ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß"
        )

# ‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏á‡∏¥‡∏ô
@receiver(post_save, sender=RefundRequest)
def notify_seller_refund_request(sender, instance, created, **kwargs):
    if created:
        SellerNotification.objects.create(
            seller=instance.order.seller.user,
            message=f"‚ö†Ô∏è ‡∏°‡∏µ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ #{instance.order.id}"
        )

# ‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà
@receiver(post_save, sender=Review)
def notify_seller_new_review(sender, instance, created, **kwargs):
    if created:
        SellerNotification.objects.create(
            seller=instance.product.seller.user,
            message=f"‚≠êÔ∏è ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ {instance.product.name} ‡πÇ‡∏î‡∏¢ {instance.user.username}"
        )

from django.db.models.signals import post_save
from django.dispatch import receiver
from .models import WithdrawalRequest, SellerNotification

@receiver(post_save, sender=WithdrawalRequest)
def notify_seller_withdrawal_request(sender, instance, created, **kwargs):
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÉ‡∏´‡∏°‡πà ‡πÅ‡∏ï‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï (‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ)
    if not created and instance.payment_proof:  
        SellerNotification.objects.create(
            seller=instance.seller.user,
            message=f"üíµ ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ñ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô {instance.amount} ‡∏ö‡∏≤‡∏ó ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£"
        )


# ‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ñ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
@receiver(post_save, sender=WithdrawalRequest)
def notify_seller_withdrawal_approved(sender, instance, **kwargs):
    if instance.status == "approved":
        SellerNotification.objects.create(
            seller=instance.seller.user,
            message=f"‚úÖ ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ñ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô {instance.amount} ‡∏ö‡∏≤‡∏ó ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß"
        )

# ‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ñ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò
@receiver(post_save, sender=WithdrawalRequest)
def notify_seller_withdrawal_rejected(sender, instance, **kwargs):
    if instance.status == "rejected":
        SellerNotification.objects.create(
            seller=instance.seller.user,
            message=f"‚ùå ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ñ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô {instance.amount} ‡∏ö‡∏≤‡∏ó ‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò"
        )
