from .models import Notification

def create_notification(user, sender, notification_type, post=None, group_post=None, order=None):
    if post and group_post:
        raise ValueError("Cannot assign both post and group_post to a notification.")

    notification = Notification.objects.create(
        user=user,
        sender=sender,
        notification_type=notification_type,
        post=post,
        group_post=group_post,  # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö group_post
        order=order
    )
    return notification

def create_seller_notification(user, sender, notification_type, order=None):
    """ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢ """
    if notification_type not in ['new_order', 'new_review', 'refund_request', 'refund_completed', 'order_shipped', 'refund_approved', 'refund_rejected']:
        raise ValueError("‚ùå Invalid notification type for seller.")

    print(f"üîî ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô '{notification_type}' ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö {user.username}")  # ‚úÖ Debugging

    Notification.objects.create(
        user=user,  # ‚úÖ ‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢
        sender=sender,  # ‚úÖ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏∞‡∏ö‡∏ö
        notification_type=notification_type,
        order=order
    )

